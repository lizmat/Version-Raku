use Test;
use Version::Raku;

plan 18;

my $v = Version::Raku.new("1.0foo.bar");
isa-ok $v, Version::Raku;

is-deeply $v.cmp($v),   Same, 'can we compare with cmp';
is-deeply $v.eqv($v),   True, 'can we compare with eqv';
is-deeply $v."=="($v),  True, 'can we compare with ==';
is-deeply $v."<"($v),  False, 'can we compare with <';
is-deeply $v."<="($v),  True, 'can we compare with <=';
is-deeply $v.">="($v),  True, 'can we compare with >=';
is-deeply $v.">"($v),  False, 'can we compare with >';
is-deeply $v."!="($v), False, 'can we compare with !=';

my $z = Version::Raku.new("");
isa-ok $v, Version::Raku;

is-deeply $v.cmp($z),   More, 'can we compare z with cmp';
is-deeply $v.eqv($z),  False, 'can we compare z with eqv';
is-deeply $v."=="($z), False, 'can we compare z with ==';
is-deeply $v."<"($z),  False, 'can we compare z with <';
is-deeply $v."<="($z), False, 'can we compare z with <=';
is-deeply $v.">="($z),  True, 'can we compare z with >=';
is-deeply $v.">"($z),   True, 'can we compare z with >';
is-deeply $v."!="($z),  True, 'can we compare z with !=';

# vim: expandtab shiftwidth=4
