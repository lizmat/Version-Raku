=begin pod

=head1 NAME

Version::Raku - Version with comparator methods

=head1 SYNOPSIS

=begin code :lang<raku>
use Version::Raku;

my $left  = Version::Raku.new("1.0");
my $right = Version::Raku.new("1.1");

say $left.cmp($right);  # Less
say $left."<"($right);  # True
=end code

=head1 DESCRIPTION

The C<Version::Raku> distribution provides a C<Version::Raku> class
that is a sub-class of C<Version>, but which provides a number of
comparator methods, similar to the ones provided by the
L<C<Version::Repology>|https://raku.land/zef:lizmat/Version::Repology>
distribution.

=head1 INSTANTIATION

=begin code :lang<raku>
my $v = Version::Raku.new("1.0");
=end code

The basic instantion of a C<Version::Raku> object is done with
the C<new> method, taking the version string as a positional argument.

=head1 CLASS METHODS

=head2 as-generic-range

=begin code :lang<raku>
say Version::Raku.as-generic-range(v1.2);     # (== v1.2)
say Version::Raku.as-generic-range(v1.2+);    # (>= v1.2)
say Version::Raku.as-generic-range('1.2.*');  # (>= v1.2 < v1.3)
=end code

Convert a Raku version specification to a generic range specification,
consisting of a C<Slip> with a string representing a comparator ("==",
">=", "<") and a C<Version::Raku> object, possibly repeated.

=head1 COMPARATOR METHODS

=head2 cmp

=begin code :lang<raku>
my $left  = Version::Raku.new("1.0");
my $right = Version::Raku.new("1.1");

say $left.cmp($left);   # Same
say $left.cmp($right);  # Less
say $right.cmp($left);  # More
=end code

The C<cmp> method returns the C<Order> of a comparison of the invocant
and the positional argument, which is either C<Less>, C<Same>, or
C<More>.

=head2 eqv

=begin code :lang<raku>
my $left  = Version::Raku.new("1.01");
my $right = Version::Raku.new("1.1");

say $left.eqv($right);  # True
=end code

The C<eqv> method returns whether the internal state of two
C<Version::Raku> objects are identical.

=head2 == != < <= > >= ~~

=begin code :lang<raku>
my $left  = Version::Raku.new("1.0");
my $right = Version::Raku.new("1.1");

say $left."=="($right);  # False
say $left."<"($right);   # True
=end code

These oddly named methods provide the same functionality as their
infix counterparts.  Please note that you B<must> use the C<"xx"()>
syntax, because otherwise the Raku compiler will assume you've made
a syntax error.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/Version-Raku .
Comments and Pull Requests are welcome.

If you like this module, or what Iâ€™m doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
